import argparse
def arg_gen():
    args = argparse.ArgumentParser()
    args.add_argument("device",type= int)
    args.add_argument("Mode",help="what mode do you need to train a model")
    args.add_argument("--dataset",help="choose your dataset(Enter the path if you are selecting network data(train))", type=str)
    args.add_argument("--datatype",choices = ['image','network'],default='network')
    args.add_argument('--mixture', action='store_true')
    args.add_argument('--task',default = "unsw9to2",type = str)
    args.add_argument("--testdata",help="the path for test data",default = None)
    args.add_argument('--targettrain', type = str, default = None)
    args.add_argument('--targettest', type = str, default = None)
    args.add_argument("--lr", type= float,default=0.1)
    args.add_argument("--epoch",type= int,default=200)
    args.add_argument("--batch",type = int, default= 256)
    args.add_argument("--how", type = str)
    args.add_argument("--n_eval_step",type = int, default= 10)
    args.add_argument("--weight_decay",type= float,default=0)
    args.add_argument("--momentum",type= float,default=0)
    args.add_argument("--norm",default=2)
    args.add_argument("--max_iter",type=int,default=20)
    args.add_argument("--eps", type=float,default=.2)
    args.add_argument("--epoch_step",type=int,default=10)
    args.add_argument("--temp",default=.1,type=int)
    args.add_argument("--alpha",default=.1,type=float)
    args.add_argument('--seed',type = int, default=42)
    args.add_argument('--target', type = bool, default= False)
    args.add_argument('--lr_schedule', type=str, default='piecewise', choices=['cosine', 'piecewise', 'constant'], help='learning schedule')
    args.add_argument('--twins_source',type = str)
    args.add_argument("--teacher_model", type = str, default= "resnet18")
    args.add_argument('--optim', type=str, default='SGD', choices=['SGD', 'Adam'], help='optimizer')
    args.add_argument('--method', type=str, default='AdaAD')
    args.add_argument("--learning_model",type = str, default = 'res')
    args.add_argument("--model", type = str, default = "mobilenet",choices=["mobilenet","wide","densenet","res"])
    args.add_argument('--is_binary',default=False,type=bool)
    args.add_argument("--eps_step", type = float,default=.1)
    args.add_argument("--model_folder",default= "./Historyforplotting")
    args.add_argument("--beta_trades",default=1)
    args.add_argument("--lambda_twins",default = 1, type = float)
    args.add_argument("--lambda_pgdat", default=0,type=float)
    args.add_argument("--feat_sim",default=0.005)
    args.add_argument('--depth',type = int, default = 34)
    args.add_argument('--input_dim',type=int,default = 41)
    args.add_argument('--widening', type = int, default =10)
    args.add_argument("--model_dir",default= "./finetunemodel")
    args.add_argument("--warmstart_step",default=25,type= int)
    args.add_argument("--featurepath",default = "./result/featurepath")
    args.add_argument("--pretrained",default=None)
    args.add_argument('--warmup_lr', action='store_true')
    args.add_argument('--percent',default=1,type = float)
    args.add_argument('--warmup_lr_epoch', default=15, type=int)
    args.add_argument('--AdaAD_alpha', default=1.0, type=float, help='AdaAD_alpha')
    args.add_argument('--IAD_begin', default=60, type=int, help='IAD_begin')
    args.add_argument('--IAD_alpha', default=1.0, type=float, help='IAD_alpha')
    args.add_argument('--IAD_beta', default=0.1, type=float, help='IAD_beta')
    args.add_argument('--is_desc', action='store_true')
    args.add_argument('--desc_str', type=str, default='', help='desc_str')
    args.add_argument('--init_epochs', type=int, default=30, help='init training for two-stage methods')
    args.add_argument('--twins_class',type = int)
    args.add_argument('--trial', type=str, default='1', help='trial id')

    args.add_argument('--gamma', type=float, default=1, help='weight for classification')
    args.add_argument('--cof',type=float,default=1)
    args.add_argument('-b', '--beta', type=float, default=.5, help='weight balance for other losses')
    args.add_argument('--task_name',type = str)
    # NCE distillation
    args.add_argument('--feat_dim', default=128, type=int, help='feature dimension')
    args.add_argument('--mode', default='exact', type=str, choices=['exact', 'relax'])
    args.add_argument('--cardtrain',default='new',type = str,choices=['old', 'new'])
    args.add_argument('--nce_k', default=10000, type=int, help='number of negative samples for NCE')
    args.add_argument('--nce_t', default=0.07, type=float, help='temperature parameter for softmax')
    args.add_argument('--nce_m', default=0.5, type=float, help='momentum for non-parametric updates')
    args.add_argument("--is_sample", default=False ,type = bool)
    args.add_argument('--abolation',type= str)
    # hint layer
    args.add_argument('--hint_layer', default=2, type=int, choices=[0, 1, 2, 3, 4])
    args.add_argument('--resume', '-r', action='store_true', help='resume from checkpoint')
    args = args.parse_args()
    return args